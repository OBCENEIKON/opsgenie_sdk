=begin
#Opsgenie REST API

#Opsgenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module OpsgenieSdk
  class ServiceIncidentRuleApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Service Incident Rule
    # Creates a new service incident rule
    # @param identifier Identifier of the service
    # @param body Request payload of CreateServiceIncidentRulePayload
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_service_incident_rule(identifier, body, opts = {})
      data, _status_code, _headers = create_service_incident_rule_with_http_info(identifier, body, opts)
      data
    end

    # Create Service Incident Rule
    # Creates a new service incident rule
    # @param identifier Identifier of the service
    # @param body Request payload of CreateServiceIncidentRulePayload
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def create_service_incident_rule_with_http_info(identifier, body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceIncidentRuleApi.create_service_incident_rule ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceIncidentRuleApi.create_service_incident_rule"
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceIncidentRuleApi.create_service_incident_rule"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}/incident-rules'.sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceIncidentRuleApi#create_service_incident_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete service incident rule
    # Delete incident rule of the service
    # @param identifier Identifier of the service
    # @param id Id of the service incident rule
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_service_incident_rule(identifier, id, opts = {})
      data, _status_code, _headers = delete_service_incident_rule_with_http_info(identifier, id, opts)
      data
    end

    # Delete service incident rule
    # Delete incident rule of the service
    # @param identifier Identifier of the service
    # @param id Id of the service incident rule
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_service_incident_rule_with_http_info(identifier, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceIncidentRuleApi.delete_service_incident_rule ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceIncidentRuleApi.delete_service_incident_rule"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ServiceIncidentRuleApi.delete_service_incident_rule"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}/routing-rules/{id}'.sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceIncidentRuleApi#delete_service_incident_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List Service Incident Rules
    # Returns list of service incident rules
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [ListServiceIncidentRulesResponse]
    def list_service_routing_rules(identifier, opts = {})
      data, _status_code, _headers = list_service_routing_rules_with_http_info(identifier, opts)
      data
    end

    # List Service Incident Rules
    # Returns list of service incident rules
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [Array<(ListServiceIncidentRulesResponse, Fixnum, Hash)>] ListServiceIncidentRulesResponse data, response status code and response headers
    def list_service_routing_rules_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceIncidentRuleApi.list_service_routing_rules ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceIncidentRuleApi.list_service_routing_rules"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}/incident-rules'.sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListServiceIncidentRulesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceIncidentRuleApi#list_service_routing_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update service incident rule
    # Update incident rule of the service
    # @param identifier Identifier of the service
    # @param id Id of the service incident rule
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateServiceIncidentRulePayload] :body Request payload of update Service Incident Rule action
    # @return [SuccessResponse]
    def update_service_incident_rule(identifier, id, opts = {})
      data, _status_code, _headers = update_service_incident_rule_with_http_info(identifier, id, opts)
      data
    end

    # Update service incident rule
    # Update incident rule of the service
    # @param identifier Identifier of the service
    # @param id Id of the service incident rule
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateServiceIncidentRulePayload] :body Request payload of update Service Incident Rule action
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def update_service_incident_rule_with_http_info(identifier, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceIncidentRuleApi.update_service_incident_rule ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceIncidentRuleApi.update_service_incident_rule"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling ServiceIncidentRuleApi.update_service_incident_rule"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}/routing-rules/{id}'.sub('{' + 'identifier' + '}', identifier.to_s).sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PUT, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceIncidentRuleApi#update_service_incident_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
