=begin
#Opsgenie REST API

#Opsgenie OpenAPI Specification

OpenAPI spec version: 2.0.0

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.13

=end

require 'uri'

module OpsgenieSdk
  class ServiceApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Create Service
    # Creates a new service
    # @param body Request payload of created service
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def create_service(body, opts = {})
      data, _status_code, _headers = create_service_with_http_info(body, opts)
      data
    end

    # Create Service
    # Creates a new service
    # @param body Request payload of created service
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def create_service_with_http_info(body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.create_service ...'
      end
      # verify the required parameter 'body' is set
      if @api_client.config.client_side_validation && body.nil?
        fail ArgumentError, "Missing the required parameter 'body' when calling ServiceApi.create_service"
      end
      # resource path
      local_var_path = '/v1/services'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(body)
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#create_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Delete Service
    # Delete service with given id
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [SuccessResponse]
    def delete_service(identifier, opts = {})
      data, _status_code, _headers = delete_service_with_http_info(identifier, opts)
      data
    end

    # Delete Service
    # Delete service with given id
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def delete_service_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.delete_service ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceApi.delete_service"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}'.sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#delete_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get Service
    # Returns service with given 'id'
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [GetServiceResponse]
    def get_service(identifier, opts = {})
      data, _status_code, _headers = get_service_with_http_info(identifier, opts)
      data
    end

    # Get Service
    # Returns service with given &#39;id&#39;
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetServiceResponse, Fixnum, Hash)>] GetServiceResponse data, response status code and response headers
    def get_service_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.get_service ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceApi.get_service"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}'.sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'GetServiceResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#get_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # List services
    # Return list of services
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of users to retrieve (default to 100)
    # @option opts [Integer] :offset Number of users to skip from start (default to 0)
    # @option opts [String] :sort_field Field to use in sorting. Should be one of &#39;username&#39;, &#39;fullName&#39; and &#39;insertedAt&#39;
    # @option opts [String] :order Direction of sorting. Should be one of &#39;asc&#39; or &#39;desc&#39; (default to asc)
    # @option opts [String] :query Field:value combinations with most of user fields to make more advanced searches. Possible fields are username, fullName, blocked, verified, role, locale, timeZone, userAddress and createdAt
    # @return [ListServicesResponse]
    def list_services(opts = {})
      data, _status_code, _headers = list_services_with_http_info(opts)
      data
    end

    # List services
    # Return list of services
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit Number of users to retrieve
    # @option opts [Integer] :offset Number of users to skip from start
    # @option opts [String] :sort_field Field to use in sorting. Should be one of &#39;username&#39;, &#39;fullName&#39; and &#39;insertedAt&#39;
    # @option opts [String] :order Direction of sorting. Should be one of &#39;asc&#39; or &#39;desc&#39;
    # @option opts [String] :query Field:value combinations with most of user fields to make more advanced searches. Possible fields are username, fullName, blocked, verified, role, locale, timeZone, userAddress and createdAt
    # @return [Array<(ListServicesResponse, Fixnum, Hash)>] ListServicesResponse data, response status code and response headers
    def list_services_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.list_services ...'
      end
      if @api_client.config.client_side_validation && opts[:'order'] && !['asc', 'desc'].include?(opts[:'order'])
        fail ArgumentError, 'invalid value for "order", must be one of asc, desc'
      end
      # resource path
      local_var_path = '/v1/services'

      # query parameters
      query_params = {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'sortField'] = opts[:'sort_field'] if !opts[:'sort_field'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'ListServicesResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#list_services\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Update Service (Partial)
    # Update service with given id
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateServicePayload] :body Request payload of update service action
    # @return [SuccessResponse]
    def update_service(identifier, opts = {})
      data, _status_code, _headers = update_service_with_http_info(identifier, opts)
      data
    end

    # Update Service (Partial)
    # Update service with given id
    # @param identifier Identifier of the service
    # @param [Hash] opts the optional parameters
    # @option opts [UpdateServicePayload] :body Request payload of update service action
    # @return [Array<(SuccessResponse, Fixnum, Hash)>] SuccessResponse data, response status code and response headers
    def update_service_with_http_info(identifier, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: ServiceApi.update_service ...'
      end
      # verify the required parameter 'identifier' is set
      if @api_client.config.client_side_validation && identifier.nil?
        fail ArgumentError, "Missing the required parameter 'identifier' when calling ServiceApi.update_service"
      end
      # resource path
      local_var_path = '/v1/services/{identifier}'.sub('{' + 'identifier' + '}', identifier.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = {}

      # http body (model)
      post_body = @api_client.object_to_http_body(opts[:'body'])
      auth_names = ['GenieKey']
      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'SuccessResponse')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: ServiceApi#update_service\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
